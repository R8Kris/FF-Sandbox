//Updates player leaderboards and statistics
handlers.updateLeaderboard = function (args, context){
	var response = "";
	//Get values from payload
	var LeaderboardName = args.leaderboardname;
	var NewScore = args.newscore;
	
	//do error checking here
	var str = LeaderboardName;

	if(str.includes("XboxOne_")){
	  str = str.slice(8, str.length);
	} else if (str.includes("PS4_")){
	  str = str.slice(4, str.length);
	} else if (str.includes("Steam_")){
	  str = str.slice(6, str.length);
	}
	
	if(leaderboardData.hasOwnProperty(str)){
		response = "yis";
		return { messageValue: response };
	} else {
		response = "noplz";
		return { messageValue: response };
	}
	
	//get old value
	var playerStats = server.GetPlayerStatistics(
	{
		PlayFabId: currentPlayerId,
		StatisticNames: [LeaderboardName],
	});
	
	var currentScore=Number.MAX_VALUE;
	var arrayLength = playerStats.Statistics.length;
	
	for(var i = 0; i < arrayLength; i++){
		if(playerStats.Statistics[i].StatisticName == LeaderboardName){
			if(playerStats.Statistics[i].Value < currentScore){
			  currentScore = playerStats.Statistics[i].Value;
			}
		}
	}

	//check new score is better than old score
	if(NewScore < currentScore){
		server.UpdatePlayerStatistics(
		{
			PlayFabId: currentPlayerId,
			Statistics: [{StatisticName: LeaderboardName, Value: NewScore}],
		});
		response="";
		return { messageValue: response };
	} else {
		response="older score is better. OldScore:" + currentScore + " newScore:" + NewScore;
		return { messageValue: response };
	}
	
	response = "something went wrong";
	return { messageValue: response };
};

handlers.helloWorld = function (args, context) {
    
    // The pre-defined "currentPlayerId" variable is initialized to the PlayFab ID of the player logged-in on the game client. 
    // Cloud Script handles authenticating the player automatically.
    var message = "Hello " + currentPlayerId + "!";

    // You can use the "log" object to write out debugging statements. It has
    // three functions corresponding to logging level: debug, info, and error. These functions
    // take a message string and an optional object.
    log.info(message);
    var inputValue = null;
    if (args && args.inputValue)
        inputValue = args.inputValue;
    log.debug("helloWorld:", { input: args.inputValue });

    // The value you return from a Cloud Script function is passed back 
    // to the game client in the ExecuteCloudScript API response, along with any log statements
    // and additional diagnostic information, such as any errors returned by API calls or external HTTP
    // requests. They are also included in the optional player_executed_cloudscript PlayStream event 
    // generated by the function execution.
    // (https://api.playfab.com/playstream/docs/PlayStreamEventModels/player/player_executed_cloudscript)
    return { messageValue: message };
};